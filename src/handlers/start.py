from decimal import Decimal
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup
from aiogram.types.inline_keyboard_button import InlineKeyboardButton
from aiogram import Bot
from src.config import ADMINS, is_zbt_enabled_db  # –ò–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
from src.models import SessionLocal
from src.models.user import User
from src.keyboards.main_menu import main_menu_kb
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from functools import wraps

router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_fio = State()
    waiting_for_phone = State()

def whitelist_required(handler):
    @wraps(handler)
    async def wrapper(event, *args, **kwargs):
        uid = getattr(event, "from_user", None)
        if uid is None:
            return await handler(event, *args, **kwargs)
        user_id = uid.id
        print(f"[whitelist_required] user_id={user_id}, ADMINS={ADMINS}")  # DEBUG
        if int(user_id) in ADMINS:  # –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ int
            return await handler(event, *args, **kwargs)
        zbt_enabled = await is_zbt_enabled_db()
        if not zbt_enabled:
            return await handler(event, *args, **kwargs)
        async with SessionLocal() as session:
            user = await session.get(User, user_id)
            if not user or not user.is_whitelisted:
                if hasattr(event, "answer"):
                    await event.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
                else:
                    await event.reply("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
        return await handler(event, *args, **kwargs)
    return wrapper

@router.message(CommandStart())
@whitelist_required
async def on_start(message: Message, state: FSMContext):
    tg_user = message.from_user
    tg_id = tg_user.id
    username = tg_user.username
    first_name = tg_user.first_name or ""
    last_name = tg_user.last_name

    async with SessionLocal() as session:
        db_user = await session.get(User, tg_id)
        if db_user is None:
            user = User(
                id=tg_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                rating_sum=0,
                rating_votes=0,
            )
            session.add(user)
            await session.commit()
            db_user = user
        else:
            db_user.username = username
            db_user.first_name = first_name
            db_user.last_name = last_name
            await session.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not db_user.fio:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
            await state.set_state(RegistrationStates.waiting_for_fio)
            return
        if not db_user.phone:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375291234567:")
            await state.set_state(RegistrationStates.waiting_for_phone)
            return

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {db_user.fio or first_name or '–∏–≥—Ä–æ–∫'}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ –≤–æ–ª–µ–π–±–æ–ª—É –≤ –ú–∏–Ω—Å–∫–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    print(f"[DEBUG] ADMINS={ADMINS}, your_id={message.from_user.id}")  # –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # –£–±–∏—Ä–∞–µ–º ReplyKeyboardMarkup, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º InlineKeyboardMarkup
    inline_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="menu_new")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="menu_my")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="menu_search")],
        [InlineKeyboardButton(text="üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="menu_requests")],
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
    ])
    await message.answer(text, reply_markup=inline_menu)

    from aiogram import Bot
    bot: Bot = message.bot

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if message.from_user.id in ADMINS:
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="new", description="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"),
            BotCommand(command="my", description="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
            BotCommand(command="search", description="–ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
            BotCommand(command="requests", description="–ú–æ–∏ –∑–∞—è–≤–∫–∏"),
            BotCommand(command="addhall", description="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ª"),
            BotCommand(command="dm", description="–ü–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
            BotCommand(command="whitelist", description="–î–æ–±–∞–≤–∏—Ç—å –≤ whitelist"),
            BotCommand(command="unwhitelist", description="–£–±—Ä–∞—Ç—å –∏–∑ whitelist"),
            BotCommand(command="zbt_on", description="–í–∫–ª—é—á–∏—Ç—å –ó–ë–¢ (—Ç–æ–ª—å–∫–æ whitelist)"),
            BotCommand(command="zbt_off", description="–í—ã–∫–ª—é—á–∏—Ç—å –ó–ë–¢ (–æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è –≤—Å–µ—Ö)"),
        ], scope={"type": "chat", "chat_id": message.from_user.id})
    else:
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="new", description="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"),
            BotCommand(command="my", description="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
            BotCommand(command="search", description="–ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
            BotCommand(command="requests", description="–ú–æ–∏ –∑–∞—è–≤–∫–∏"),
            BotCommand(command="profile", description="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        ], scope={"type": "chat", "chat_id": message.from_user.id})

@router.message(Command("start"))
@whitelist_required
async def cmd_start(msg: Message, bot: Bot):
    if msg.from_user.id in ADMINS:
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="new", description="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"),
            BotCommand(command="my", description="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
            BotCommand(command="search", description="–ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
            BotCommand(command="requests", description="–ú–æ–∏ –∑–∞—è–≤–∫–∏"),
            BotCommand(command="addhall", description="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ª"),
            BotCommand(command="dm", description="–ü–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
            BotCommand(command="whitelist", description="–î–æ–±–∞–≤–∏—Ç—å –≤ whitelist"),
            BotCommand(command="unwhitelist", description="–£–±—Ä–∞—Ç—å –∏–∑ whitelist"),
            BotCommand(command="zbt_on", description="–í–∫–ª—é—á–∏—Ç—å –ó–ë–¢ (—Ç–æ–ª—å–∫–æ whitelist)"),
            BotCommand(command="zbt_off", description="–í—ã–∫–ª—é—á–∏—Ç—å –ó–ë–¢ (–æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è –≤—Å–µ—Ö)"),
        ], scope={"type": "chat", "chat_id": msg.from_user.id})
    else:
        await bot.set_my_commands([
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="new", description="–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"),
            BotCommand(command="my", description="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
            BotCommand(command="search", description="–ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
            BotCommand(command="requests", description="–ú–æ–∏ –∑–∞—è–≤–∫–∏"),
        ], scope={"type": "chat", "chat_id": msg.from_user.id})

@router.callback_query(lambda c: c.data == "menu_new")
@whitelist_required
async def menu_new_callback(cb: CallbackQuery, state: FSMContext):
    # –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ cmd_new(cb.message, ...) ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å!
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –∫–æ–¥ –∏–∑ cmd_new –∏–ª–∏ –≤—ã–Ω–µ—Å–∏—Ç–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    from src.models.hall import Hall
    from src.keyboards.halls import halls_keyboard
    from src.states.announce_states import AdStates
    from sqlalchemy import select
    async with SessionLocal() as session:
        halls = (await session.scalars(select(Hall).order_by(Hall.name))).all()
    if not halls:
        await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await cb.answer()
        return
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:", reply_markup=halls_keyboard(halls))
    await state.set_state(AdStates.waiting_for_hall)
    await cb.answer()

@router.callback_query(lambda c: c.data == "menu_my")
@whitelist_required
async def menu_my_callback(cb: CallbackQuery):
    from src.handlers.my_ads import cmd_my_ads
    await cmd_my_ads(cb)  # <-- –ø–µ—Ä–µ–¥–∞—ë–º —Å–∞–º CallbackQuery, –∞ –Ω–µ cb.message
    await cb.answer()

@router.callback_query(lambda c: c.data == "menu_search")
@whitelist_required
async def menu_search_callback(cb: CallbackQuery):
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É, –Ω–µ message-—Ö–µ–Ω–¥–ª–µ—Ä!
    from src.handlers.search import search_menu_kb
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=search_menu_kb())
    await cb.answer()

@router.callback_query(lambda c: c.data == "menu_requests")
@whitelist_required
async def menu_requests_callback(cb: CallbackQuery):
    from src.handlers.my_signups import cmd_requests_callback
    await cmd_requests_callback(cb)
    await cb.answer()

@router.callback_query(lambda c: c.data == "menu_profile")
@whitelist_required
async def menu_profile_callback(cb: CallbackQuery):
    from src.handlers.profile import cmd_profile
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Message —Å –Ω—É–∂–Ω—ã–º from_user (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º cb)
    await cmd_profile(cb)
    await cb.answer()

@router.message(RegistrationStates.waiting_for_fio)
async def reg_fio(msg: Message, state: FSMContext):
    fio = msg.text.strip()
    if len(fio.split()) < 2:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
        return
    async with SessionLocal() as session:
        user = await session.get(User, msg.from_user.id)
        if user:
            user.fio = fio
            await session.commit()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375291234567:")
    await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(RegistrationStates.waiting_for_phone)
async def reg_phone(msg: Message, state: FSMContext):
    phone = msg.text.strip()
    if not phone.startswith("+375") or not phone[1:].isdigit() or len(phone) != 13:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375291234567:")
        return
    async with SessionLocal() as session:
        user = await session.get(User, msg.from_user.id)
        if user:
            user.phone = phone
            await session.commit()
    await msg.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ inline-–º–µ–Ω—é, –±–µ–∑ main_menu_kb
    inline_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="menu_new")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="menu_my")],
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="menu_search")],
        [InlineKeyboardButton(text="üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="menu_requests")],
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
    ])
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=inline_menu
    )
    await state.clear()

@router.message(Command("profile"))
@whitelist_required
async def cmd_profile(msg: Message):
    from src.handlers.profile import cmd_profile
    await cmd_profile(msg)
async def cmd_profile(msg: Message):
    from src.handlers.profile import cmd_profile
    await cmd_profile(msg)
    

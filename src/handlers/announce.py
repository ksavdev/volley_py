import datetime as dt
from decimal import Decimal

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select

from src.states.announce_states import AdStates
from src.states.hall_request_states import HallRequestStates
from src.models import SessionLocal
from src.models.hall import Hall
from src.models.announcement import Announcement
from src.models.user import User
from src.keyboards.halls import halls_keyboard
from src.keyboards.common_kb import yes_no_kb, YesNoCallback
from src.keyboards.cancel import cancel_kb
from src.keyboards.back_cancel import back_cancel_kb
from src.utils import validators
from src.utils.helpers import local
from src.keyboards.announce_manage import choose_field_keyboard
from src.handlers.start import whitelist_required


router = Router()


@router.callback_query(AdStates.waiting_for_hall, F.data == "hall_request_admin")
@whitelist_required
async def request_new_hall(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("‚ùì –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–ª–∞:")
    await state.set_state(HallRequestStates.waiting_for_hall_name)
    await cb.answer()


@router.message(Command("new"))
@whitelist_required
async def cmd_new(message: Message, state: FSMContext):
    async with SessionLocal() as session:
        halls = (await session.scalars(select(Hall).order_by(Hall.name))).all()
    if not halls:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:", reply_markup=halls_keyboard(halls))
    await state.set_state(AdStates.waiting_for_hall)


@router.callback_query(AdStates.waiting_for_hall, F.data.startswith("hall_"))
async def hall_chosen(cb: CallbackQuery, state: FSMContext):
    hall_id = int(cb.data.split("_", 1)[1])
    await state.update_data(hall_id=hall_id)
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.MM.–ì–ì–ì–ì</b>", reply_markup=back_cancel_kb())
    await state.set_state(AdStates.waiting_for_date)
    await cb.answer()


@router.message(AdStates.waiting_for_date)
async def got_date(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        async with SessionLocal() as session:
            halls = (await session.scalars(select(Hall).order_by(Hall.name))).all()
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:", reply_markup=halls_keyboard(halls))
        await state.set_state(AdStates.waiting_for_hall)
        return

    try:
        date_obj = validators.parse_date(msg.text)
    except ValueError as e:
        await msg.reply(f"{e}\n\n–ü—Ä–∏–º–µ—Ä: 25.06.2025", reply_markup=back_cancel_kb())
        return

    await state.update_data(date=date_obj)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>", reply_markup=back_cancel_kb())
    await state.set_state(AdStates.waiting_for_time)


@router.message(AdStates.waiting_for_time)
async def got_time(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.MM.–ì–ì–ì–ì</b>", reply_markup=back_cancel_kb())
        await state.set_state(AdStates.waiting_for_date)
        return

    data = await state.get_data()
    try:
        time_obj = validators.parse_time(msg.text)
        validators.future_datetime(data["date"], time_obj)
    except ValueError as e:
        await msg.reply(f"{e}\n\n–ü—Ä–∏–º–µ—Ä: 19:00", reply_markup=back_cancel_kb())
        return

    await state.update_data(time=time_obj)
    await msg.answer("–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω–æ? –í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ</b>.", reply_markup=back_cancel_kb())
    await state.set_state(AdStates.waiting_for_players_cnt)


@router.message(AdStates.waiting_for_players_cnt)
async def got_players(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>", reply_markup=back_cancel_kb())
        await state.set_state(AdStates.waiting_for_time)
        return

    try:
        players = validators.is_positive_int(msg.text)
    except ValueError as e:
        await msg.reply(f"{e}\n\n–ü—Ä–∏–º–µ—Ä: 12", reply_markup=back_cancel_kb())
        return

    await state.update_data(players=players)
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Å–≤—è–∑–∫–∞, –Ω–∞–ø–∞–¥–∞—é—â–∏–µ¬ª) –∏–ª–∏ ¬´-¬ª", reply_markup=back_cancel_kb())
    await state.set_state(AdStates.waiting_for_roles)


@router.message(AdStates.waiting_for_roles)
async def got_roles(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω–æ? –í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ</b>.", reply_markup=back_cancel_kb())
        await state.set_state(AdStates.waiting_for_players_cnt)
        return

    await state.update_data(roles=msg.text.strip() or "-")
    await msg.answer("–ù—É–∂–Ω—ã –ª–∏ —Å–≤–æ–∏ –º—è—á–∏?", reply_markup=yes_no_kb())
    await state.set_state(AdStates.waiting_for_balls_needed)


@router.callback_query(AdStates.waiting_for_balls_needed, YesNoCallback.filter())
async def balls_answer(cb: CallbackQuery, callback_data: YesNoCallback, state: FSMContext):
    await state.update_data(balls_need=(callback_data.answer == "yes"))
    await cb.message.answer("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´18+¬ª, ¬´—Ç–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω—ã¬ª) –∏–ª–∏ ¬´-¬ª", reply_markup=back_cancel_kb())
    await state.set_state(AdStates.waiting_for_restrictions)
    await cb.answer()


@router.message(AdStates.waiting_for_restrictions)
async def got_restr(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–ù—É–∂–Ω—ã –ª–∏ —Å–≤–æ–∏ –º—è—á–∏?", reply_markup=yes_no_kb())
        await state.set_state(AdStates.waiting_for_balls_needed)
        return

    await state.update_data(restrictions=msg.text.strip() or "-")
    await msg.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–ª–∞—Ç–Ω–∞—è?", reply_markup=yes_no_kb())
    await state.set_state(AdStates.waiting_for_is_paid)


@router.callback_query(AdStates.waiting_for_is_paid, YesNoCallback.filter())
async def is_paid_answer(cb: CallbackQuery, callback_data: YesNoCallback, state: FSMContext):
    paid = (callback_data.answer == "yes")
    await state.update_data(is_paid=paid)

    data = await state.get_data()
    dt_full = dt.datetime.combine(data["date"], data["time"]).replace(
        tzinfo=validators.MINSK_TZ
    )

    async with SessionLocal() as session:
        # 1) –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å
        user = await session.get(User, cb.from_user.id)
        if not user:
            user = User(
                id=cb.from_user.id,
                username=cb.from_user.username,
                first_name=cb.from_user.first_name or "",
                last_name=cb.from_user.last_name,
                rating_sum=0,
                rating_votes=0,
                rating=Decimal("5.00"),
            )
            session.add(user)
            await session.flush()

        # 2) –°–æ–∑–¥–∞—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        ann = Announcement(
            author_id    = user.id,
            hall_id      = data["hall_id"],
            datetime     = dt_full,
            capacity     = data["players"],  # ‚Üê –±—ã–ª–æ players_need
            roles        = data["roles"],
            balls_need   = data["balls_need"],
            restrictions = data["restrictions"],
            is_paid      = paid,
        )
        session.add(ann)
        await session.commit()
        await session.refresh(ann)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞
        hall_name = await session.scalar(select(Hall.name).where(Hall.id == ann.hall_id))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    local_dt = local(ann.datetime)
    text = (
        "üèê <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ</b>\n"
        f"ID: <code>{ann.id}</code>\n"
        f"–ó–∞–ª: {hall_name}\n"
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {local_dt.strftime('%d.%m.%Y %H:%M')}\n"
        f"–ù—É–∂–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {ann.capacity}\n"  # ‚Üê –±—ã–ª–æ ann.players_need
        f"–†–æ–ª–∏: {ann.roles}\n"
        f"–ú—è—á–∏: {'–Ω—É–∂–Ω—ã' if ann.balls_need else '–Ω–µ –Ω—É–∂–Ω—ã'}\n"
        f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {ann.restrictions}\n"
        f"–¢–∏–ø: {'–ü–ª–∞—Ç–Ω–∞—è' if ann.is_paid else '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}"
    )
    await cb.message.edit_text(text)
    await state.clear()
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


def render_announcement(ann: Announcement, hall_name: str = None) -> str:
    now = dt.datetime.now(validators.MINSK_TZ)
    local_dt = local(ann.datetime)
    header = "‚ùå <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞</b>\n\n" if ann.datetime <= now else ""
    if hall_name is None:
        hall = getattr(ann, "hall", None)
        hall_name = hall.name if hall else "-"
    return (
        f"{header}"
        "üèê <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n"
        f"ID: <code>{ann.id}</code>\n"
        f"–ó–∞–ª: {hall_name}\n"
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {local_dt.strftime('%d.%m.%Y %H:%M')}\n"
        f"–ù—É–∂–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {ann.capacity}\n"  # ‚Üê –±—ã–ª–æ ann.players_need
        f"–†–æ–ª–∏: {ann.roles}\n"
        f"–ú—è—á–∏: {'–Ω—É–∂–Ω—ã' if ann.balls_need else '–Ω–µ –Ω—É–∂–Ω—ã'}\n"
        f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {ann.restrictions}\n"
        f"–¢–∏–ø: {'–ü–ª–∞—Ç–Ω–∞—è' if ann.is_paid else '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}"
    )


@router.callback_query(F.data.startswith("delete_ad_"))
@whitelist_required
async def delete_ad(cb: CallbackQuery):
    ann_id = int(cb.data.split("_")[-1])
    async with SessionLocal() as session:
        ann = await session.get(Announcement, ann_id)
        now = dt.datetime.now(validators.MINSK_TZ)
        if ann.datetime < now:
            await cb.message.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
            return
        session.delete(ann)
        await session.commit()

    await cb.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=None)
    await cb.answer()


@router.callback_query(F.data.startswith("halls_page_"))
async def halls_page(cb: CallbackQuery, state: FSMContext):
    page = int(cb.data.split("_")[-1])
    async with SessionLocal() as session:
        halls = (await session.scalars(select(Hall).order_by(Hall.name))).all()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:", reply_markup=halls_keyboard(halls, page=page))
    await cb.answer()


@router.message(AdStates.editing_date)
async def editing_date_step(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        ad_id = data.get("ad_id")
        await msg.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=choose_field_keyboard(ad_id))
        await state.set_state(AdStates.choosing_field)
        return
    try:
        new_date = validators.parse_date(msg.text)
    except ValueError as e:
        await msg.reply(f"{e}\n\n–ü—Ä–∏–º–µ—Ä: 28.06.2025")
        return

    data = await state.get_data()
    ad_id = data.get("ad_id")
    async with SessionLocal() as session:
        ad = await session.get(Announcement, ad_id)
        if not ad:
            await msg.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –≤—Ä–µ–º—è –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–º
        new_dt = ad.datetime.replace(year=new_date.year, month=new_date.month, day=new_date.day)
        ad.datetime = new_dt
        await session.commit()
    await msg.answer("–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ")
    await state.clear()


@router.message(AdStates.editing_time)
async def editing_time_step(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        ad_id = data.get("ad_id")
        await msg.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=choose_field_keyboard(ad_id))
        await state.set_state(AdStates.choosing_field)
        return
    try:
        new_time = validators.parse_time(msg.text)
    except ValueError as e:
        await msg.reply(f"{e}\n\n–ü—Ä–∏–º–µ—Ä: 19:00")
        return

    data = await state.get_data()
    ad_id = data.get("ad_id")
    async with SessionLocal() as session:
        ad = await session.get(Announcement, ad_id)
        if not ad:
            await msg.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –¥–∞—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–µ–π
        new_dt = ad.datetime.replace(hour=new_time.hour, minute=new_time.minute)
        ad.datetime = new_dt
        await session.commit()
    await msg.answer("–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ")
    await state.clear()


@router.message(AdStates.editing_players)
async def editing_players_step(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        ad_id = data.get("ad_id")
        await msg.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=choose_field_keyboard(ad_id))
        await state.set_state(AdStates.choosing_field)
        return
    try:
        players = validators.is_positive_int(msg.text)
    except ValueError as e:
        await msg.reply(f"{e}\n\n–ü—Ä–∏–º–µ—Ä: 12")
        return

    data = await state.get_data()
    ad_id = data.get("ad_id")
    async with SessionLocal() as session:
        ad = await session.get(Announcement, ad_id)
        if not ad:
            await msg.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        ad.capacity = players
        await session.commit()
    await msg.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ")
    await state.clear()


@router.message(AdStates.editing_roles)
async def editing_roles_step(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        ad_id = data.get("ad_id")
        await msg.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=choose_field_keyboard(ad_id))
        await state.set_state(AdStates.choosing_field)
        return

    roles = msg.text.strip() or "-"
    data = await state.get_data()
    ad_id = data.get("ad_id")
    async with SessionLocal() as session:
        ad = await session.get(Announcement, ad_id)
        if not ad:
            await msg.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        ad.roles = roles
        await session.commit()
    await msg.answer("–†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã ‚úÖ")
    await state.clear()


@router.message(AdStates.editing_balls)
async def editing_balls_step(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        ad_id = data.get("ad_id")
        await msg.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=choose_field_keyboard(ad_id))
        await state.set_state(AdStates.choosing_field)
        return

    answer = msg.text.strip().lower()
    if answer not in ("–¥–∞", "–Ω–µ—Ç"):
        await msg.reply("–í–≤–µ–¥–∏—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
        return
    balls_need = (answer == "–¥–∞")
    data = await state.get_data()
    ad_id = data.get("ad_id")
    async with SessionLocal() as session:
        ad = await session.get(Announcement, ad_id)
        if not ad:
            await msg.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        ad.balls_need = balls_need
        await session.commit()
    await msg.answer("–ü–∞—Ä–∞–º–µ—Ç—Ä ¬´–ú—è—á–∏ –Ω—É–∂–Ω—ã¬ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ")
    await state.clear()


@router.message(AdStates.editing_restrict)
async def editing_restrict_step(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        ad_id = data.get("ad_id")
        await msg.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=choose_field_keyboard(ad_id))
        await state.set_state(AdStates.choosing_field)
        return

    restrictions = msg.text.strip() or "-"
    data = await state.get_data()
    ad_id = data.get("ad_id")
    async with SessionLocal() as session:
        ad = await session.get(Announcement, ad_id)
        if not ad:
            await msg.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        ad.restrictions = restrictions
        await session.commit()
    await msg.answer("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã ‚úÖ")
    await state.clear()


@router.message(AdStates.editing_is_paid)
async def editing_paid_step(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        ad_id = data.get("ad_id")
        await msg.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=choose_field_keyboard(ad_id))
        await state.set_state(AdStates.choosing_field)
        return

    answer = msg.text.strip().lower()
    if answer not in ("–¥–∞", "–Ω–µ—Ç"):
        await msg.reply("–í–≤–µ–¥–∏—Ç–µ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
        return
    is_paid = (answer == "–¥–∞")
    data = await state.get_data()
    ad_id = data.get("ad_id")
    async with SessionLocal() as session:
        ad = await session.get(Announcement, ad_id)
        if not ad:
            await msg.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        ad.is_paid = is_paid
        await session.commit()
    await msg.answer("–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ")
    await state.clear()

from aiogram import Router, types, exceptions
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.models import SessionLocal
from src.models.signup import Signup, SignupStatus
from src.models.announcement import Announcement
from src.keyboards.confirm_yes_no import confirm_kb
from src.keyboards.announce_manage import announcement_manage_keyboard
from .announce import render_announcement
from src.utils.helpers import local

router = Router()

@router.callback_query(lambda c: c.data and c.data.startswith("signup:"))
async def confirm_signup(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π:
      callback.data == "signup:{signup_id}:accept" –∏–ª–∏ "signup:{signup_id}:decline"
    1) –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ;
    2) –†–µ–Ω–¥–µ—Ä–∏—Ç —É –∞–≤—Ç–æ—Ä–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ ‚úì/‚úó);
    3) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
    """
    _, signup_id_str, action = callback.data.split(":")
    signup_id = int(signup_id_str)
    accepted = action == "accept"

    # ‚Äî‚Äî‚Äî –†–∞–±–æ—Ç–∞ —Å –ë–î ‚Äî‚Äî‚Äî
    async with SessionLocal() as session:
        signup = await session.get(Signup, signup_id)
        if not signup:
            return await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        signup.status = (
            SignupStatus.accepted if accepted else SignupStatus.declined
        )
        session.add(signup)
        await session.commit()

        # 2. –ñ–∞–¥–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º hall –∏ –≤—Å–µ signups
        result = await session.execute(
            select(Announcement)
            .options(
                selectinload(Announcement.hall),
                selectinload(Announcement.signups)
            )
            .where(Announcement.id == signup.announcement_id)
        )
        announcement = result.scalar_one()

    # ‚Äî‚Äî‚Äî –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–≤—Ç–æ—Ä–∞ ‚Äî‚Äî‚Äî
    new_text = render_announcement(announcement)
    manage_kb = announcement_manage_keyboard(announcement)
    try:
        await callback.message.edit_text(new_text, reply_markup=manage_kb)
    except exceptions.TelegramBadRequest as e:
        # Telegram —Ä—É–≥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if "message is not modified" not in e.message:
            raise

    # ¬´–ì–∞—Å–∏–º¬ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (–±–µ–∑ toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    await callback.answer()

    # ‚Äî‚Äî‚Äî –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ ‚Äî‚Äî‚Äî
    when = local(announcement.datetime).strftime("%d.%m %H:%M")
    player_msg = (
        f"üì£ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ {announcement.hall.name} ‚Ä¢ {when} "
        f"{'–ø—Ä–∏–Ω—è—Ç–∞' if accepted else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}."
    )
    try:
        await callback.bot.send_message(
            chat_id=signup.player_id,  # <‚Äî –∑–¥–µ—Å—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ player_id –∏–∑ –º–æ–¥–µ–ª–∏ Signup
            text=player_msg,
        )
    except Exception:
        # –ò–≥—Ä–æ–∫ –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select, func
from src.models import SessionLocal
from src.models.user import User
from src.models.signup import Signup, SignupStatus
from src.models.announcement import Announcement
import datetime as dt

router = Router(name="profile")

@router.message(Command("profile"))
@router.callback_query(lambda c: c.data == "menu_profile")
async def cmd_profile(event):
    # event –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery
    if isinstance(event, Message):
        user_id = event.from_user.id
        send = event.answer
        full_name = event.from_user.full_name
        username = event.from_user.username
    else:
        user_id = event.from_user.id
        send = event.message.answer
        full_name = event.from_user.full_name
        username = event.from_user.username

    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await send("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            if hasattr(event, "answer"):
                await event.answer()
            return

        # –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫
        total_signups = await session.scalar(
            select(func.count()).select_from(Signup).where(Signup.player_id == user_id)
        )
        # –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏
        accepted_signups = await session.scalar(
            select(func.count()).select_from(Signup).where(
                Signup.player_id == user_id,
                Signup.status == SignupStatus.accepted
            )
        )
        # –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        declined_signups = await session.scalar(
            select(func.count()).select_from(Signup).where(
                Signup.player_id == user_id,
                Signup.status == SignupStatus.declined
            )
        )
        # –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        total_ads = await session.scalar(
            select(func.count()).select_from(Announcement).where(Announcement.author_id == user_id)
        )
        # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
        now = dt.datetime.now().replace(tzinfo=None)
        full_ads = await session.scalar(
            select(func.count()).select_from(Announcement).where(
                Announcement.author_id == user_id,
                Announcement.datetime <= now,
                # –ù–∞–ø—Ä–∏–º–µ—Ä: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ –∏ –∑–∞—è–≤–æ–∫ —Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ capacity
                Announcement.capacity == (
                    select(func.count())
                    .select_from(Signup)
                    .where(
                        Signup.announcement_id == Announcement.id,
                        Signup.status == SignupStatus.accepted
                    ).scalar_subquery()
                )
            )
        )
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –∏ —Ä–µ–π—Ç–∏–Ω–≥
        rating_votes = user.rating_votes
        rating = user.rating

    fio = user.fio or full_name
    phone = user.phone or "-"
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–§–ò–û: {fio}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"Username: @{username or '-'}\n"
        f"ID: <code>{user_id}</code>\n\n"
        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: <b>{rating:.2f}</b> ({rating_votes} –æ—Ü–µ–Ω–æ–∫)\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{total_signups}</b>\n"
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: <b>{accepted_signups}</b>\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{declined_signups}</b>\n"
        f"üìã –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{total_ads}</b>\n"
        f"üèÜ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: <b>{full_ads}</b>\n"
        f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>{(accepted_signups/total_signups*100 if total_signups else 0):.0f}%</b>\n"
    )
    await send(text)
    if hasattr(event, "answer"):
        await event.answer()
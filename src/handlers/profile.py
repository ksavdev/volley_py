from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select, func
from src.models import SessionLocal
from src.models.user import User
from src.models.signup import Signup, SignupStatus
from src.models.announcement import Announcement

router = Router(name="profile")

@router.message(Command("profile"))
async def cmd_profile(msg: Message):
    user_id = msg.from_user.id
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await msg.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫
        total_signups = await session.scalar(
            select(func.count()).select_from(Signup).where(Signup.player_id == user_id)
        )
        # –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏
        accepted_signups = await session.scalar(
            select(func.count()).select_from(Signup).where(
                Signup.player_id == user_id,
                Signup.status == SignupStatus.accepted
            )
        )
        # –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        declined_signups = await session.scalar(
            select(func.count()).select_from(Signup).where(
                Signup.player_id == user_id,
                Signup.status == SignupStatus.declined
            )
        )
        # –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        total_ads = await session.scalar(
            select(func.count()).select_from(Announcement).where(Announcement.author_id == user_id)
        )
        # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
        full_ads = await session.scalar(
            select(func.count()).select_from(Announcement).where(
                Announcement.author_id == user_id,
                Announcement.players_need == 0
            )
        )
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –∏ —Ä–µ–π—Ç–∏–Ω–≥
        rating_votes = user.rating_votes
        rating = user.rating

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {msg.from_user.full_name}\n"
        f"Username: @{msg.from_user.username or '-'}\n"
        f"ID: <code>{user_id}</code>\n\n"
        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: <b>{rating:.2f}</b> ({rating_votes} –æ—Ü–µ–Ω–æ–∫)\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{total_signups}</b>\n"
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: <b>{accepted_signups}</b>\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{declined_signups}</b>\n"
        f"üìã –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{total_ads}</b>\n"
        f"üèÜ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: <b>{full_ads}</b>\n"
        f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>{(accepted_signups/total_signups*100 if total_signups else 0):.0f}%</b>\n"
    )
    await msg.answer(text)
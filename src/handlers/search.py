# src/handlers/search.py

import datetime as dt

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.models import SessionLocal
from src.models.announcement import Announcement
from src.models.signup import Signup, SignupStatus
from src.states.signup_states import SignupStates
from src.keyboards.search_menu import search_menu_kb
from src.keyboards.ad_list import ad_list_kb
from src.keyboards.signup_request import signup_kb
from src.utils.validators import MINSK_TZ
from src.utils.helpers import local
from src.handlers.request_notify import notify_author

router = Router(name="search")


@router.message(Command("search"))
async def cmd_search(msg: Message):
    """
    –®–∞–≥ 1: –≤—ã–±–æ—Ä –ø–ª–∞—Ç–Ω—ã—Ö / –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
    """
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=search_menu_kb()
    )


@router.callback_query(F.data.in_({"search_paid", "search_free"}))
async def choose_type(cb: CallbackQuery):
    """
    –®–∞–≥ 2: —Å–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
    """
    is_paid = (cb.data == "search_paid")
    now     = dt.datetime.now(MINSK_TZ)

    async with SessionLocal() as session:
        ads = (
            await session.scalars(
                select(Announcement)
                .options(
                    selectinload(Announcement.hall),
                    selectinload(Announcement.signups)
                )
                .where(
                    Announcement.is_paid   == is_paid,
                    Announcement.datetime  > now,
                )
                .order_by(Announcement.datetime)
            )
        ).all()

    if not ads:
        await cb.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    await cb.message.edit_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=ad_list_kb(ads)
    )
    await cb.answer()


@router.callback_query(F.data == "search_menu")
async def back_to_search_menu(cb: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤—ã–±–æ—Ä –ø–ª–∞—Ç–Ω—ã—Ö/–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö.
    """
    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=search_menu_kb()
    )
    await cb.answer()


@router.callback_query(F.data.startswith("ad_"))
async def ad_chosen(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 3: –ø–æ–¥—Ä–æ–±–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ + –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª / ¬´–ù–∞–∑–∞–¥¬ª.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ª, –∞–¥—Ä–µ—Å, –¥–∞—Ç—É, —Å–ª–æ—Ç—ã –∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.
    """
    ad_id = int(cb.data.split("_", 1)[1])
    now   = dt.datetime.now(MINSK_TZ)

    # ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å hall –∏ signups->player
    async with SessionLocal() as session:
        result = await session.execute(
            select(Announcement)
            .options(
                selectinload(Announcement.hall),
                selectinload(Announcement.signups)
                    .selectinload(Signup.player),
            )
            .where(Announcement.id == ad_id)
        )
        ad = result.scalar_one_or_none()

    if not ad:
        return await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    # ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞
    if ad.datetime <= now:
        return await cb.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞.", show_alert=True)

    # ‚Äî —Å—á–∏—Ç–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    accepted = [s for s in ad.signups if s.status == SignupStatus.accepted]
    total_slots = ad.players_need
    taken_slots = len(accepted)
        # ‚Üê –ù–û–í–´–ô –ë–õ–û–ö: –µ—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã
    if taken_slots >= total_slots:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –±–∞–Ω–Ω–µ—Ä —Å –∏–Ω—Ñ–æ–π, –Ω–æ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª
        when = local(ad.datetime).strftime("%d.%m.%Y %H:%M")
        hall_name    = ad.hall.name if ad.hall else "‚Äî"
        hall_address = getattr(ad.hall, "address", "‚Äî")
        text = (
            f"üèü <b>–ó–∞–ª:</b> {hall_name}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {hall_address}\n"
            f"üìÖ <b>–î–∞—Ç–∞/–í—Ä–µ–º—è:</b> {when}\n\n"
            f"üë• <b>–ò–≥—Ä–æ–∫–∏ ({taken_slots}/{total_slots}):</b>\n" +
            "\n".join(f"- {s.player.first_name or '‚Äî'} ({s.role})" for s in accepted) +
            "\n\n‚ùå –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã."
        )
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–ù–∞–∑–∞–¥¬ª:
        await cb.message.edit_text(text, reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="search_menu")]
            ]
        ))
        return
    if accepted:
        players_list = "\n".join(
            f"- {s.player.first_name or '‚Äî'} ({s.role})"
            for s in accepted
        )
        players_block = (
            f"üë• <b>–ò–≥—Ä–æ–∫–∏ ({taken_slots}/{total_slots}):</b>\n"
            f"{players_list}\n\n"
        )
    else:
        players_block = f"üë• <b>–ò–≥—Ä–æ–∫–∏ ({taken_slots}/{total_slots}):</b> –Ω–µ—Ç\n\n"

    # ‚Äî –ª–æ–∫–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è
    when = local(ad.datetime).strftime("%d.%m.%Y %H:%M")

    # ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ª—É
    hall_name    = ad.hall.name if ad.hall else "‚Äî"
    hall_address = getattr(ad.hall, "address", "‚Äî")

    # ‚Äî –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = (
        f"üèü <b>–ó–∞–ª:</b> {hall_name}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {hall_address}\n"
        f"üìÖ <b>–î–∞—Ç–∞/–í—Ä–µ–º—è:</b> {when}\n\n"
        f"{players_block}"
        "‚úçÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å."
    )

    await cb.message.edit_text(
        text,
        reply_markup=signup_kb(ad_id, ad.is_paid)
    )
    await cb.answer()


@router.callback_query(F.data.startswith("signup_"))
async def signup_clicked(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 4: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª ‚Äî –∂–¥—ë–º —Ä–æ–ª—å.
    """
    ad_id = int(cb.data.split("_", 1)[1])
    await state.update_data(ad_id=ad_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∏–≥—Ä–æ–≤—É—é —Ä–æ–ª—å (–∏–ª–∏ ¬´-¬ª):")
    await state.set_state(SignupStates.waiting_for_role)
    await cb.answer()


@router.message(SignupStates.waiting_for_role)
async def got_role(msg: Message, state: FSMContext):
    """
    –®–∞–≥ 5: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å, —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞.
    """
    role = msg.text.strip() or "-"
    data = await state.get_data()
    ad_id = data["ad_id"]

    async with SessionLocal() as session:
        signup = await session.scalar(
            select(Signup).where(
                Signup.announcement_id == ad_id,
                Signup.player_id       == msg.from_user.id,
                Signup.status          == SignupStatus.declined,
            )
        )
        if signup:
            signup.status = SignupStatus.pending
            signup.role   = role
        else:
            signup = Signup(
                announcement_id=ad_id,
                player_id      = msg.from_user.id,
                role           = role,
            )
            session.add(signup)

        await session.commit()
        await session.refresh(signup)
        ad = await session.get(
            Announcement, ad_id,
            options=[selectinload(Announcement.hall)]
        )

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
    await notify_author(msg.bot, ad, msg.from_user, role, signup.id)

    await msg.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()

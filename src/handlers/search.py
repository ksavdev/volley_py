# src/handlers/search.py

import datetime as dt
from src.utils.helpers import MINSK_TZ

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.models import SessionLocal
from src.models.announcement import Announcement
from src.models.signup import Signup, SignupStatus
from src.states.signup_states import SignupStates
from src.keyboards.search_menu import search_menu_kb
from src.keyboards.ad_list import ad_list_kb
from src.keyboards.signup_request import signup_kb
from src.utils.validators import MINSK_TZ
from src.utils.helpers import local
from src.handlers.request_notify import notify_author
from src.handlers.start import whitelist_required

router = Router(name="search")


def back_to_list_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="search_menu")]
        ]
    )


@router.message(Command("search"))
@whitelist_required
async def cmd_search(msg: Message):
    """–®–∞–≥ 1: –≤—ã–±–æ—Ä –ø–ª–∞—Ç–Ω—ã—Ö/–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö."""
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=search_menu_kb())


@router.callback_query(F.data.in_({"search_paid", "search_free"}))
@whitelist_required
async def choose_type(cb: CallbackQuery):
    is_paid = (cb.data == "search_paid")
    now = dt.datetime.now(MINSK_TZ)

    async with SessionLocal() as session:
        ads = (
            await session.scalars(
                select(Announcement)
                .where(
                    Announcement.is_paid == is_paid,
                    Announcement.datetime > now
                )
                .options(selectinload(Announcement.hall))  # ‚Üê –≤–æ—Ç —ç—Ç–æ –≤–∞–∂–Ω–æ!
                .order_by(Announcement.datetime)
            )
        ).all()

    if not ads:
        await cb.message.edit_text("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=None)
        await cb.answer()
        return

    await cb.message.edit_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=ad_list_kb(ads)
    )
    await cb.answer()


@router.callback_query(F.data == "search_menu")
@whitelist_required
async def back_to_search_menu(cb: CallbackQuery):
    """–ù–∞–∑–∞–¥ ‚Äì –Ω–∞ –≤—ã–±–æ—Ä –ø–ª–∞—Ç–Ω—ã—Ö/–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö."""
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=search_menu_kb())
    await cb.answer()


@router.callback_query(F.data.startswith("ad_"))
@whitelist_required
async def ad_chosen(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 3: –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è + –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª/¬´–ù–∞–∑–∞–¥¬ª.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ª, –∞–¥—Ä–µ—Å, –¥–∞—Ç—É, —Å–ª–æ—Ç—ã –∏ —Å–ø–∏—Å–æ–∫ —É–∂–µ –ü–†–ò–ù–Ø–¢–´–• –∏–≥—Ä–æ–∫–æ–≤.
    """
    ad_id = int(cb.data.split("_", 1)[1])
    now = dt.datetime.now(MINSK_TZ)

    # ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å hall –∏ signups->player
    async with SessionLocal() as session:
        result = await session.execute(
            select(Announcement)
            .options(
                selectinload(Announcement.hall),
                selectinload(Announcement.signups)
                    .selectinload(Signup.player),
            )
            .where(Announcement.id == ad_id)
        )
        ad = result.scalar_one_or_none()

        if not ad:
            return await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
        exists = await session.scalar(
            select(Signup.id).where(
                Signup.announcement_id == ad_id,
                Signup.player_id == cb.from_user.id,
                Signup.status.in_([SignupStatus.pending, SignupStatus.accepted])
            )
        )

    if exists:
        return await cb.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.",
            show_alert=True
        )

    if ad.datetime <= now:
        return await cb.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞.", show_alert=True)

    # ‚Äî —Å—á–∏—Ç–∞–µ–º —Å–ª–æ—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏–º –±–ª–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    accepted = [s for s in ad.signups if s.status == SignupStatus.accepted]
    total_slots = ad.capacity
    taken_slots = len(accepted)
    slots_info = f"{taken_slots}/{total_slots}"

    if taken_slots >= total_slots:
        players_block = f"üë• <b>–ò–≥—Ä–æ–∫–∏ ({slots_info}):</b> —Å–ª–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n\n"
    else:
        if taken_slots == 0:
            players_block = f"üë• <b>–ò–≥—Ä–æ–∫–∏ ({slots_info}):</b> –Ω–µ—Ç\n\n"
        else:
            players_list = "\n".join(
                f"- {s.player.fio or s.player.first_name or s.player.username or s.player_id} ({s.role})"
                for s in accepted
            )
            players_block = (
                f"üë• <b>–ò–≥—Ä–æ–∫–∏ ({slots_info}):</b>\n"
                f"{players_list}\n\n"
            )

    # ‚Äî –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ª—É –∏ –≤—Ä–µ–º–µ–Ω–∏
    when = local(ad.datetime).strftime("%d.%m.%Y %H:%M")
    hall_name = ad.hall.name if ad.hall else "‚Äî"
    hall_address = getattr(ad.hall, "address", "‚Äî")

    text = (
        f"üèü <b>–ó–∞–ª:</b> {hall_name}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {hall_address}\n"
        f"üìÖ <b>–î–∞—Ç–∞/–í—Ä–µ–º—è:</b> {when}\n\n"
        f"{players_block}"
        "‚úçÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å."
    )

    # --- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ ---
    if taken_slots >= total_slots:
        await cb.message.edit_text(text, reply_markup=back_to_list_kb())
    else:
        await cb.message.edit_text(text, reply_markup=signup_kb(ad_id, ad.is_paid))

    await cb.answer()


@router.callback_query(F.data.startswith("signup_"))
@whitelist_required
async def signup_clicked(cb: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 4: –∂–¥—ë–º –≤–≤–æ–¥ —Ä–æ–ª–∏."""
    ad_id = int(cb.data.split("_", 1)[1])
    await state.update_data(ad_id=ad_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∏–≥—Ä–æ–≤—É—é —Ä–æ–ª—å (–∏–ª–∏ ¬´-¬ª):")
    await state.set_state(SignupStates.waiting_for_role)
    await cb.answer()


@router.message(SignupStates.waiting_for_role)
@whitelist_required
async def got_role(msg: Message, state: FSMContext):
    """
    –®–∞–≥ 5: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞.
    """
    role = msg.text.strip() or "-"
    data = await state.get_data()
    ad_id = data["ad_id"]

    async with SessionLocal() as session:
        # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        exists = await session.scalar(
            select(Signup.id).where(
                Signup.announcement_id == ad_id,
                Signup.player_id == msg.from_user.id,
                Signup.status.in_([SignupStatus.pending, SignupStatus.accepted])
            )
        )
        if exists:
            await msg.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
            await state.clear()
            return

        # –∏—â–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        declined_signup = await session.scalar(
            select(Signup).where(
                Signup.announcement_id == ad_id,
                Signup.player_id == msg.from_user.id,
                Signup.status == SignupStatus.declined
            )
        )
        if declined_signup:
            if getattr(declined_signup, "comment", None) != "cancelled_by_user":
                await msg.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
                await state.clear()
                return
            declined_signup.status = SignupStatus.pending
            declined_signup.role = role
            declined_signup.comment = None
            await session.commit()
            await session.refresh(declined_signup)
            ad = await session.get(
                Announcement, ad_id,
                options=[selectinload(Announcement.hall)]
            )
            await notify_author(msg.bot, ad, msg.from_user, role, declined_signup.id)
            await msg.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await state.clear()
            return

        # –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        signup = Signup(
            announcement_id=ad_id,
            player_id=msg.from_user.id,
            role=role
        )
        session.add(signup)

        await session.commit()
        await session.refresh(signup)
        ad = await session.get(
            Announcement, ad_id,
            options=[selectinload(Announcement.hall)]
        )
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        await notify_author(msg.bot, ad, msg.from_user, role, signup.id)
        await msg.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    await state.clear()

# src/handlers/my_ads.py
from __future__ import annotations

from typing import List
import re

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.models import SessionLocal
from src.models.announcement import Announcement
from src.models.signup import Signup, SignupStatus
from src.keyboards.manage_players import players_kb
from src.keyboards.announce_manage import manage_keyboard, list_keyboard, choose_field_keyboard
from src.utils.helpers import local, MINSK_TZ
from aiogram.fsm.context import FSMContext
from src.states.edit_states import EditStates

router = Router(name="my_ads_players")


async def _render_players(message: Message, ad: Announcement) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç/—Ä–∏—Å—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    """
    accepted: List[Signup] = [
        su for su in ad.signups if su.status == SignupStatus.accepted
    ]

    await message.edit_text(
        (
            f"–ü—Ä–∏–Ω—è—Ç—ã–µ –∏–≥—Ä–æ–∫–∏ "
            f"({ad.hall.name} {local(ad.datetime).strftime('%d.%m %H:%M')}):"
        ),
        reply_markup=players_kb(accepted, ad.id),
    )


@router.callback_query(F.data.startswith("players_"))
async def handle_show_players(cb: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´üë• –ò–≥—Ä–æ–∫–∏¬ª –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º.

    callback_data: players_<ad_id>
    """
    ad_id = int(cb.data.split("_")[1])

    async with SessionLocal() as session:
        ad: Announcement | None = await session.get(
            Announcement,
            ad_id,
            options=[
                selectinload(Announcement.hall),
                selectinload(Announcement.signups)
                .selectinload(Signup.player),
            ],
        )

    if ad is None:
        await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    await _render_players(cb.message, ad)
    await cb.answer()


@router.callback_query(F.data.startswith("kick_"))
async def handle_kick_player(cb: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

    callback_data: kick_<ad_id>_<player_id>
    """
    ad_id, player_id = map(int, cb.data.split("_")[1:3])

    async with SessionLocal() as session:
        signup: Signup | None = await session.scalar(
            select(Signup).where(
                Signup.announcement_id == ad_id,
                Signup.player_id == player_id,
                Signup.status == SignupStatus.accepted,
            )
        )

        if signup is None:
            await cb.answer("–ò–≥—Ä–æ–∫ —É–∂–µ —É–¥–∞–ª—ë–Ω.", show_alert=True)
            return

        # –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∏—Å–∫–ª—é—á—ë–Ω
        signup.status = SignupStatus.declined
        await session.commit()

        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        await session.refresh(signup.announcement)
        ad: Announcement = signup.announcement

    # –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
    await cb.bot.send_message(
        player_id,
        "‚õîÔ∏è –ê–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –≤–∞—à—É –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.",
    )

    # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    await _render_players(cb.message, ad)
    await cb.answer("–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω ‚úÖ")


from aiogram.filters import Command


@router.message(Command("my"))
async def cmd_my_ads(message: Message):
    author_id = message.from_user.id
    async with SessionLocal() as session:
        ads = (
            await session.scalars(
                select(Announcement)
                .options(selectinload(Announcement.hall))
                .where(Announcement.author_id == author_id)
                .order_by(Announcement.datetime.desc())
            )
        ).all()

    if not ads:
        return await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

    await message.answer("–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=list_keyboard(ads))


@router.callback_query(lambda cb: re.fullmatch(r"myad_\d+", cb.data))
async def handle_myad_details(cb: CallbackQuery):
    ad_id = int(cb.data.split("_")[1])
    async with SessionLocal() as session:
        ad: Announcement | None = await session.get(
            Announcement,
            ad_id,
            options=[selectinload(Announcement.hall)]
        )
    if ad is None:
        await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    text = (
        f"<b>ID:</b> {ad.id}\n"
        f"<b>–ó–∞–ª:</b> {ad.hall.name}\n"
        f"<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {local(ad.datetime).strftime('%d.%m.%Y %H:%M')}\n"
        f"<b>–ù—É–∂–Ω–æ –∏–≥—Ä–æ–∫–æ–≤:</b> {ad.players_need}\n"
        f"<b>–†–æ–ª–∏:</b> {ad.roles}\n"
        f"<b>–ú—è—á–∏:</b> {'–Ω—É–∂–Ω—ã' if ad.balls_need else '–Ω–µ –Ω—É–∂–Ω—ã'}\n"
        f"<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b> {ad.restrictions}\n"
        f"<b>–¢–∏–ø:</b> {'–ü–ª–∞—Ç–Ω–∞—è' if ad.is_paid else '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}"
    )
    await cb.message.edit_text(text, reply_markup=manage_keyboard(ad.id))
    await cb.answer()


@router.callback_query(F.data == "back")
async def handle_back_to_ads(cb: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ù–∞–∑–∞–¥¬ª.
    """
    author_id = cb.from_user.id
    async with SessionLocal() as session:
        ads = (
            await session.scalars(
                select(Announcement)
                .options(selectinload(Announcement.hall))
                .where(Announcement.author_id == author_id)
                .order_by(Announcement.datetime.desc())
            )
        ).all()

    if not ads:
        await cb.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
    else:
        await cb.message.edit_text("–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=list_keyboard(ads))
    await cb.answer()


@router.callback_query(F.data.startswith("myad_edit_"))
async def handle_edit_ad(cb: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å" ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    """
    ad_id = int(cb.data.split("_")[2])
    await state.update_data(ad_id=ad_id)
    await cb.message.edit_text("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=choose_field_keyboard(ad_id))
    await state.set_state(EditStates.choosing_field)
    await cb.answer()


@router.callback_query(F.data == "edit_cancel")
async def handle_edit_cancel(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await cb.answer()

# src/handlers/my_ads_players.py

from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.models import SessionLocal
from src.models.signup import Signup, SignupStatus
from src.models.announcement import Announcement
from src.handlers.announce import render_announcement
from src.utils.helpers import local
from src.keyboards.announce_manage import announcement_manage_keyboard

router = Router(name="players")


@router.callback_query(F.data.startswith("players_"))
async def show_players(cb: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:
    callback.data == "players_{announcement_id}"
    """
    _, a_id = cb.data.split("_", 1)
    ann_id = int(a_id)

    async with SessionLocal() as session:
        result = await session.execute(
            select(Announcement)
            .options(
                selectinload(Announcement.hall),
                selectinload(Announcement.signups)
                    .selectinload(Signup.player),
            )
            .where(Announcement.id == ann_id)
        )
        ann = result.scalar_one_or_none()

    if not ann:
        return await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ç–µ–∂–∏ (player_id, –∏–º—è, —Ä–æ–ª—å, —Ä–µ–π—Ç–∏–Ω–≥)
    players: list[tuple[int, str, str, float]] = []
    for su in ann.signups:
        if su.status != SignupStatus.accepted:
            continue
        role = su.role or "-"
        if su.player:
            name = su.player.first_name or su.player.username or str(su.player_id)
            rating = float(su.player.rating or 0)
        else:
            name, rating = str(su.player_id), 0.0
        players.append((su.player_id, name, role, rating))

    when = local(ann.datetime).strftime("%d.%m %H:%M")
    header = f"üèê –ò–≥—Ä–æ–∫–∏ ({ann.hall.name} ‚Ä¢ {when}):\n\n"
    body = (
        "–ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."
        if not players
        else "\n".join(f"{n} ({r}) ‚≠ê{rt:.2f}" for _, n, r, rt in players)
    )

    # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {name}",
                    callback_data=f"confirm_remove_{ann.id}_{pid}"
                )
            ]
            for pid, name, *_ in players
        ] + [
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"back:{ann.id}")]
        ]
    )

    await cb.message.edit_text(header + body, reply_markup=kb)
    await cb.answer()


@router.callback_query(F.data.startswith("confirm_remove_"))
async def confirm_remove(cb: CallbackQuery):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º ¬´–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å?¬ª –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.
    callback.data == "confirm_remove_{ann_id}_{player_id}"
    """
    # –ü–æ–ª—É—á–∞–µ–º ann_id –∏ player_id
    payload = cb.data[len("confirm_remove_"):].split("_", 1)
    ann_id, player_id = map(int, payload)

    async with SessionLocal() as session:
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–µ —Å player
        result = await session.execute(
            select(Signup)
            .options(selectinload(Signup.player))
            .where(
                Signup.announcement_id == ann_id,
                Signup.player_id == player_id,
                Signup.status == SignupStatus.accepted
            )
        )
        signup = result.scalar_one_or_none()

    if not signup:
        return await cb.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    role = signup.role or "-"
    if signup.player:
        name = signup.player.first_name or signup.player.username or str(player_id)
    else:
        name = str(player_id)

    text = f"–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ <b>{name}</b> (—Ä–æ–ª—å ¬´{role}¬ª)?"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="‚úÖ –î–∞",
                callback_data=f"do_remove_{ann_id}_{player_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç",
                callback_data=f"players_{ann_id}"
            ),
        ]]
    )
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()


@router.callback_query(F.data.startswith("do_remove_"))
async def do_remove(cb: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    callback.data == "do_remove_{ann_id}_{player_id}"
    """
    payload = cb.data[len("do_remove_"):].split("_", 1)
    ann_id, player_id = map(int, payload)

    async with SessionLocal() as session:
        result = await session.execute(
            select(Signup)
            .where(
                Signup.announcement_id == ann_id,
                Signup.player_id == player_id,
                Signup.status == SignupStatus.accepted
            )
        )
        signup = result.scalar_one_or_none()
        if signup:
            await session.delete(signup)
            await session.commit()

    # –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await cb.message.edit_text("–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω, —Å–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω ‚úÖ")
    await cb.answer()


@router.callback_query(F.data.startswith("back:"))
async def back_to_announcement(cb: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    callback.data == "back:{ann_id}"
    """
    _, a_id = cb.data.split(":", 1)
    ann_id = int(a_id)

    async with SessionLocal() as session:
        result = await session.execute(
            select(Announcement)
            .options(selectinload(Announcement.hall))
            .where(Announcement.id == ann_id)
        )
        ann = result.scalar_one_or_none()

    if not ann:
        return await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    text = render_announcement(ann)
    kb = announcement_manage_keyboard(ann)
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()

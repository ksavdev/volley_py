# src/handlers/my_ads_players.py

from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.models import SessionLocal
from src.models.signup import Signup, SignupStatus
from src.models.announcement import Announcement
from src.handlers.announce import render_announcement
from src.utils.helpers import local
from src.keyboards.announce_manage import announcement_manage_keyboard
from src.handlers.start import whitelist_required

router = Router(name="players")


@router.callback_query(F.data.startswith("players_"))
@whitelist_required
async def show_players(cb: CallbackQuery):
    ann_id = int(cb.data.split("_")[1])

    async with SessionLocal() as session:
        ann = await session.get(
            Announcement,
            ann_id,
            options=[
                selectinload(Announcement.hall),
                selectinload(Announcement.signups).selectinload(Signup.player),
            ],
        )

    if not ann:
        await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    players: list[tuple[int, str, str, float]] = []
    declined_players: list[tuple[int, str, str, float]] = []
    for su in ann.signups:
        role = su.role or "-"
        if su.player:
            name = su.player.fio or su.player.first_name or su.player.username or str(su.player_id)
            rating = float(su.player.rating or 0)
        else:
            name, rating = str(su.player_id), 0.0
        if su.status == SignupStatus.accepted:
            players.append((su.player_id, name, role, rating))
        elif su.status == SignupStatus.declined:
            declined_players.append((su.player_id, name, role, rating))

    when = local(ann.datetime).strftime("%d.%m %H:%M")
    header = f"üèê –ò–≥—Ä–æ–∫–∏ ({ann.hall.name} ‚Ä¢ {when}):\n\n"

    body_lines = []
    kb_rows = []

    # –ü—Ä–∏–Ω—è—Ç—ã–µ –∏–≥—Ä–æ–∫–∏
    if players:
        body_lines.append("‚úÖ <b>–ü—Ä–∏–Ω—è—Ç—ã–µ</b>")
        for pid, n, r, rt in players:
            body_lines.append(f"{n} ({r}) ‚≠ê{rt:.2f}")
            kb_rows.append([
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {n}",
                    callback_data=f"confirm_remove_{ann.id}_{pid}"
                )
            ])
    else:
        body_lines.append("–ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")

    # –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
    if declined_players:
        body_lines.append("\nüö´ <b>–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ</b>")
        for pid, n, r, rt in declined_players:
            body_lines.append(f"{n} ({r}) ‚≠ê{rt:.2f}")
            kb_rows.append([
                InlineKeyboardButton(
                    text=f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {n}",
                    callback_data=f"unblock_{ann.id}_{pid}"
                )
            ])

    kb_rows.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"back:{ann.id}")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    await cb.message.edit_text(header + "\n".join(body_lines), reply_markup=kb)
    await cb.answer()


@router.callback_query(F.data.startswith("confirm_remove_"))
@whitelist_required
async def confirm_remove(cb: CallbackQuery):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º ¬´–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å?¬ª –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.
    callback.data == "confirm_remove_{ann_id}_{player_id}"
    """
    # –ü–æ–ª—É—á–∞–µ–º ann_id –∏ player_id
    payload = cb.data[len("confirm_remove_"):].split("_", 1)
    ann_id, player_id = map(int, payload)

    async with SessionLocal() as session:
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–µ —Å player
        result = await session.execute(
            select(Signup)
            .options(selectinload(Signup.player))
            .where(
                Signup.announcement_id == ann_id,
                Signup.player_id == player_id,
                Signup.status == SignupStatus.accepted
            )
        )
        signup = result.scalar_one_or_none()

    if not signup:
        return await cb.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    role = signup.role or "-"
    if signup.player:
        name = signup.player.fio or signup.player.first_name or signup.player.username or str(player_id)
    else:
        name = str(player_id)

    text = f"–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ <b>{name}</b> (—Ä–æ–ª—å ¬´{role}¬ª)?"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="‚úÖ –î–∞",
                callback_data=f"do_remove_{ann_id}_{player_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç",
                callback_data=f"players_{ann_id}"
            ),
        ]]
    )
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()


@router.callback_query(F.data.startswith("do_remove_"))
@whitelist_required
async def do_remove(cb: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    callback.data == "do_remove_{ann_id}_{player_id}"
    """
    payload = cb.data[len("do_remove_"):].split("_", 1)
    ann_id, player_id = map(int, payload)

    async with SessionLocal() as session:
        result = await session.execute(
            select(Signup)
            .where(
                Signup.announcement_id == ann_id,
                Signup.player_id == player_id,
                Signup.status == SignupStatus.accepted
            )
        )
        signup = result.scalar_one_or_none()
        if signup:
            await session.delete(signup)
            await session.commit()

    # –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await cb.message.edit_text("–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω, —Å–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω ‚úÖ")
    await cb.answer()


@router.callback_query(F.data.startswith("back:"))
@whitelist_required
async def back_to_announcement(cb: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    callback.data == "back:{ann_id}"
    """
    _, a_id = cb.data.split(":", 1)
    ann_id = int(a_id)

    async with SessionLocal() as session:
        result = await session.execute(
            select(Announcement)
            .options(selectinload(Announcement.hall))
            .where(Announcement.id == ann_id)
        )
        ann = result.scalar_one_or_none()

    if not ann:
        return await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    text = render_announcement(ann)
    kb = announcement_manage_keyboard(ann)
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()


@router.callback_query(F.data.startswith("unblock_"))
@whitelist_required
async def unblock_declined(cb: CallbackQuery):
    """
    –°–Ω–∏–º–∞–µ—Ç —Å—Ç–∞—Ç—É—Å "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" —Å –∑–∞—è–≤–∫–∏, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –º–æ–≥ —Å–Ω–æ–≤–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.
    """
    _, ann_id, player_id = cb.data.split("_")
    ann_id = int(ann_id)
    player_id = int(player_id)

    async with SessionLocal() as session:
        signup = await session.scalar(
            select(Signup).where(
                Signup.announcement_id == ann_id,
                Signup.player_id == player_id,
                Signup.status == SignupStatus.declined,
            )
        )
        if not signup:
            await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", show_alert=True)
            return
        # –ú–æ–∂–Ω–æ –ª–∏–±–æ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É, –ª–∏–±–æ —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ pending (–∏–ª–∏ —É–¥–∞–ª–∏—Ç—å)
        await session.delete(signup)
        await session.commit()

    await cb.answer("–ò–≥—Ä–æ–∫ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.")
    # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    await show_players(cb)

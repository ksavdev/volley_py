# src/handlers/my_ads_players.py

from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.models import SessionLocal
from src.models.signup import Signup, SignupStatus
from src.models.announcement import Announcement
from src.keyboards.manage_players import players_kb
from src.utils.helpers import local

router = Router(name="players")

@router.callback_query(F.data.startswith("players_"))
async def show_players(cb: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò–≥—Ä–æ–∫–∏' –≤ –º–µ–Ω—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    –û–∂–∏–¥–∞–µ—Ç callback_data == "players_{announcement_id}".
    """
    # 1) –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    _, a_id = cb.data.split("_", 1)
    announcement_id = int(a_id)

    # 2) –í—ã–±–∏—Ä–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å hall –∏ –≤—Å–µ–º–∏ signups->player
    async with SessionLocal() as session:
        result = await session.execute(
            select(Announcement)
            .options(
                selectinload(Announcement.hall),
                selectinload(Announcement.signups)
                    .selectinload(Signup.player),
            )
            .where(Announcement.id == announcement_id)
        )
        announcement = result.scalar_one_or_none()

    if not announcement:
        return await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    # 3) –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–µ–º (id, name, rating)
    players: list[tuple[int, str, float]] = []
    for su in announcement.signups:
        if su.status != SignupStatus.accepted:
            continue
        if su.player:
            name = su.player.first_name or su.player.username or str(su.player_id)
            rating = float(getattr(su.player, "rating", 0.0))
        else:
            # –§–æ–ª–ª–±—ç–∫: –µ—Å–ª–∏ User –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω
            name = str(su.player_id)
            rating = 0.0
        players.append((su.player_id, name, rating))

    # 4) –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    when = local(announcement.datetime).strftime("%d.%m %H:%M")
    header = f"üèê –ò–≥—Ä–æ–∫–∏ ({announcement.hall.name} ‚Ä¢ {when})\n\n"
    if not players:
        body = "–ù–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."
    else:
        body = "\n".join(f"{n} ‚≠ê{rt:.2f}" for _, n, rt in players)

    kb = players_kb(players, announcement_id)

    # 5) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–≤—Ç–æ—Ä–∞
    await cb.message.edit_text(header + body, reply_markup=kb)
    # 6) –£–±–∏—Ä–∞–µ–º ¬´loading¬ª —É –∫–Ω–æ–ø–∫–∏
    await cb.answer()

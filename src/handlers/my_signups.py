import datetime as dt
from src.utils.helpers import MINSK_TZ

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.models import SessionLocal
from src.models.signup import Signup, SignupStatus
from src.models.announcement import Announcement
from src.models.user import User

from src.keyboards.my_signups import list_kb
from src.keyboards.back_cancel import back_cancel_kb
from src.utils.validators import MINSK_TZ
from aiogram.fsm.context import FSMContext
from src.states.signup_states import SignupStates
from src.handlers.start import whitelist_required
from src.services.rating import apply_penalty
from src.keyboards.manage_players import ManagePlayersCD

router = Router(name="my_signups")

# –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
status_labels = {
    SignupStatus.pending:  "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
    SignupStatus.accepted: "–ü—Ä–∏–Ω—è—Ç–∞",
    SignupStatus.declined: "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /requests ‚Äî —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(Command("requests"))
@router.message(F.text == "üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏")
@whitelist_required
async def cmd_requests(msg: Message):
    user_id = msg.from_user.id
    async with SessionLocal() as s:
        signups = (
            await s.scalars(
                select(Signup)
                .options(
                    selectinload(Signup.announcement)
                        .selectinload(Announcement.hall)
                )
                .where(
                    Signup.player_id == user_id,
                    Signup.status.in_(["–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", "–ü—Ä–∏–Ω—è—Ç–∞", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"]),
                )
                .order_by(Signup.created_at)
            )
        ).all()

    if not signups:
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    await msg.answer("–ú–æ–∏ –∑–∞—è–≤–∫–∏:", reply_markup=list_kb(signups))

@router.callback_query(lambda cb: cb.data == "menu_requests")
@whitelist_required
async def cmd_requests_callback(cb: CallbackQuery):
    user_id = cb.from_user.id
    async with SessionLocal() as s:
        signups = (
            await s.scalars(
                select(Signup)
                .options(
                    selectinload(Signup.announcement)
                        .selectinload(Announcement.hall)
                )
                .where(
                    Signup.player_id == user_id,
                    Signup.status.in_(["–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", "–ü—Ä–∏–Ω—è—Ç–∞", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"]),
                )
                .order_by(Signup.created_at)
            )
        ).all()

    if not signups:
        await cb.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    await cb.message.answer("–ú–æ–∏ –∑–∞—è–≤–∫–∏:", reply_markup=list_kb(signups))
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∏–∫ –ø–æ –∑–∞—è–≤–∫–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data.startswith("myreq_"))
@whitelist_required
async def myreq_clicked(cb: CallbackQuery):
    signup_id = int(cb.data.split("_", 1)[1])

    async with SessionLocal() as s:
        signup = await s.get(
            Signup,
            signup_id,
            options=[
                selectinload(Signup.announcement)
                    .selectinload(Announcement.hall)
            ],
        )

    if not signup or signup.player_id != cb.from_user.id:
        return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    ann = signup.announcement
    status_text = status_labels.get(signup.status, signup.status.name)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
    now = dt.datetime.now(MINSK_TZ)
    ann_dt = ann.datetime
    if ann_dt.tzinfo is None:
        # Assume stored as naive in local time, localize it
        ann_dt = MINSK_TZ.localize(ann_dt)
    # Now both are aware, safe to subtract
    time_left = (ann_dt - now).total_seconds() / 3600

    text = (
        f"ID –∑–∞—è–≤–∫–∏: {signup.id}\n"
        f"–ó–∞–ª: {ann.hall.name}\n"
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {ann.datetime.strftime('%d.%m %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}"
    )

    buttons = []
    if signup.status in (SignupStatus.pending, SignupStatus.accepted):
        if time_left > 5:
            buttons.append([
                InlineKeyboardButton(
                    text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data=f"cancel_{signup.id}"
                )
            ])
        else:
            buttons.append([
                InlineKeyboardButton(
                    text="–ü–æ–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—è",
                    callback_data=f"ask_remove_{signup.id}"
                )
            ])
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    # buttons.append([
    #     InlineKeyboardButton(
    #         text="¬´ –ù–∞–∑–∞–¥",
    #         callback_data="requests_back"
    #     )
    # ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data.startswith("cancel_"))
@whitelist_required
async def cancel_signup(cb: CallbackQuery):
    signup_id = int(cb.data.split("_", 1)[1])

    async with SessionLocal() as s:
        signup = await s.get(
            Signup,
            signup_id,
            options=[
                selectinload(Signup.announcement)
                    .selectinload(Announcement.hall)
            ],
        )
        if not signup or signup.player_id != cb.from_user.id:
            return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        if signup.status == SignupStatus.declined:
            return await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", show_alert=True)

        # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π
        signup.status = SignupStatus.declined
        signup.comment = "cancelled_by_user"
        await s.commit()

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    try:
        await cb.bot.send_message(
            signup.announcement.author_id,
            f"‚õîÔ∏è –ò–≥—Ä–æ–∫ –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ {signup.announcement.hall.name} "
            f"{signup.announcement.datetime.strftime('%d.%m %H:%M')}"
        )
    except Exception:
        pass

    # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞, —Å—Ç–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await cb.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üö´", reply_markup=None)
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "requests_back")
@whitelist_required
async def requests_back(cb: CallbackQuery):
    async with SessionLocal() as s:
        signups = (
            await s.scalars(
                select(Signup)
                .options(
                    selectinload(Signup.announcement)
                        .selectinload(Announcement.hall)
                )
                .where(
                    Signup.player_id == cb.from_user.id,
                    Signup.status.in_([
                        SignupStatus.pending,
                        SignupStatus.accepted,
                        SignupStatus.declined
                    ]),
                )
                .order_by(Signup.created_at)
            )
        ).all()

    if not signups:
        await cb.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=None)
    else:
        await cb.message.edit_text("–ú–æ–∏ –∑–∞—è–≤–∫–∏:", reply_markup=list_kb(signups))
    await cb.answer()


@router.message(SignupStates.waiting_for_comment)
@whitelist_required
async def signup_comment_step(msg: Message, state: FSMContext):
    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await msg.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
        await state.clear()
        return
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏.", reply_markup=None)
        await state.set_state(SignupStates.waiting_for_announcement)
        return
    await state.update_data(comment=msg.text.strip())
    # ...–¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏...
    await state.update_data(comment=msg.text.strip())
    # ...–¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏...

# --- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É ---
@router.callback_query(F.data.startswith("ask_remove_"))
@whitelist_required
async def ask_remove(cb: CallbackQuery):
    signup_id = int(cb.data.split("_", 2)[2])
    async with SessionLocal() as s:
        signup = await s.get(
            Signup,
            signup_id,
            options=[
                selectinload(Signup.announcement).selectinload(Announcement.hall),
                selectinload(Signup.player)
            ],
        )
        if not signup or signup.player_id != cb.from_user.id:
            return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        ann = signup.announcement
        player = signup.player
        fio = player.fio or player.first_name
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await cb.bot.send_message(
                ann.author_id,
                f"–ò–≥—Ä–æ–∫ <a href='tg://user?id={player.id}'>{fio}</a> –ø—Ä–æ—Å–∏—Ç —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ "
                f"{ann.hall.name} {ann.datetime.strftime('%d.%m %H:%M')}.\n\n"
                "–ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —á–∞—Å–æ–≤ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å –µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ 1.00 –±–∞–ª–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–£–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                            callback_data=f"remove_player_{ann.id}_{player.id}"
                        )
                    ]
                ])
            )
        except Exception:
            pass
    await cb.message.edit_text(
        "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
        "–ï—Å–ª–∏ –∞–≤—Ç–æ—Ä —É–¥–∞–ª–∏—Ç –≤–∞—Å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —á–∞—Å–æ–≤ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∏–∑–∏—Ç—å –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ 1.00 –±–∞–ª–ª–∞.",
        reply_markup=None
    )
    await cb.answer()


# --- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –∞–≤—Ç–æ—Ä—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä ---
@router.callback_query(F.data.startswith("remove_player_"))
@whitelist_required
async def remove_player_confirm(cb: CallbackQuery):
    # callback_data: remove_player_{ann_id}_{player_id}
    parts = cb.data.split("_")
    if len(parts) < 4:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    ann_id = int(parts[2])
    player_id = int(parts[3])

    async with SessionLocal() as s:
        signup = await s.scalar(
            select(Signup)
            .where(
                Signup.announcement_id == ann_id,
                Signup.player_id == player_id
            )
        )
        if not signup:
            await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä—É –≤—ã–±–æ—Ä
    text = (
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?\n"
        "–ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —á–∞—Å–æ–≤ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 1.00 –±–∞–ª–ª–∞."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å",
                callback_data=ManagePlayersCD(signup_id=signup.id, penalty=0).pack()
            ),
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –∏ -1 –∫ —Ä–µ–π—Ç–∏–Ω–≥—É",
                callback_data=ManagePlayersCD(signup_id=signup.id, penalty=1).pack()
            ),
        ]
    ])
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()


# --- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ---
@router.callback_query(ManagePlayersCD.filter())
@whitelist_required
async def do_remove_player(cb: CallbackQuery, state: FSMContext, callback_data: ManagePlayersCD):
    """
    –ê–≤—Ç–æ—Ä —É–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º —à—Ç—Ä–∞—Ñ–æ–º).
    """
    signup_id = int(callback_data.signup_id)
    penalty = bool(int(callback_data.penalty))

    async with SessionLocal() as session:
        signup: Signup = await session.get(Signup, signup_id, with_for_update=True)
        if not signup or signup.status == SignupStatus.declined:
            await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=True)
            return

        signup.status = SignupStatus.declined
        await session.commit()

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –≤–º–µ—Å—Ç–æ –∞–ª–µ—Ä—Ç–∞
        msg = "–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω, —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–Ω–∏–∂–µ–Ω." if penalty else "–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω."
        await cb.message.answer(msg)

        if penalty:
            await apply_penalty(session, signup.player_id)

    # ...–æ—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à –∫–æ–¥ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.)...